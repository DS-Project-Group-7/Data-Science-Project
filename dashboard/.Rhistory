data(pulmonary)
plot(pulmonary)
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
qqnorm(maha_dist)
qqline(maha_dist, "red")
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
qqnorm(maha_dist)
qqline(maha_dist, col = "red")
sq_m_dist <- mahalanobis(pulmonary, center=colMeans(pulmonary), cov(pulmonary))
sq_m_dist
help(qqnorm)
qqnorm(sq_m_dist)
sq_m_dist_centered <- (sq_m_dist - mean(sq_m_dist))/sqrt(var(sq_m_dist))
sq_m_dist <- mahalanobis(pulmonary, center=colMeans(pulmonary), cov(pulmonary))
qqnorm(sq_m_dist)
sq_m_dist_centered <- (sq_m_dist - mean(sq_m_dist))/sqrt(var(sq_m_dist))
sq_m_dist <- mahalanobis(pulmonary, center=colMeans(pulmonary), cov(pulmonary))
sq_m_dist_centered <- (sq_m_dist - mean(sq_m_dist))/sqrt(var(sq_m_dist))
qqnorm(sq_m_dist_centered)
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
pchisq(maha_dist, 3)
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
qnorm(pchisq(maha_dist, 3))
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
qnorm(pchisq(maha_dist, 3))
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
normal <- qnorm(pchisq(maha_dist, 3, lower.tail = F))
qqnorm(normal)
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
normal <- qnorm(pchisq(maha_dist, 3))
qqnorm(normal)
maha_dist <- mahalanobis(x = pulmonary, center = colMeans(pulmonary), cov(pulmonary))
normal <- qnorm(pchisq(maha_dist, 3))
qqnorm(normal)
qqline(normal, col = 'red')
runApp('Desktop/app')
shiny::runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
runApp('Desktop/app')
knitr::opts_chunk$set(echo = TRUE)
Lambda <- diag(c(15, 5))
Gamma <- matrix(c(-2/sqrt(5), 1/sqrt(5), 1/sqrt(5), 2/sqrt(5)), 2, 2)
(Sigma <- Gamma %*% Lambda %*% t(Gamma))
install.packages('rsconnect')
rsconnect::setAccountInfo(name='greysonchung', token='CDA5D101E872F73138F52BBD98BD53C4', secret='Av+OMfMmMUr7L0pq1XcEN/bIlN7UIOyPof5Zhzi/')
rsconnect::setAccountInfo(name='greysonchung', token='CDA5D101E872F73138F52BBD98BD53C4', secret='Av+OMfMmMUr7L0pq1XcEN/bIlN7UIOyPof5Zhzi/')
knitr::opts_chunk$set(echo = TRUE)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
S <- cov(X)
lambda <- eigen(S)$values
lambda
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
S <- cov(X)
lambda <- eigen(S)$values
as.matrix(lambda)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
S <- cov(X)
lambda <- as.matrix(eigen(S)$values)
gamma <- as.matrix(eigen(S)$vectors)
gamma
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
S <- cov(X)
lambda <- as.matrix(eigen(S)$values)
gamma <- eigen(S)$vectors
gamma
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
S <- cov(X)
lambda <- as.matrix(eigen(S)$values)
gamma <- eigen(S)$vectors
gamma
?prcomp
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
X
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
wheat
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
PCX
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
screeplot(PCX)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
#S <- cov(X)
#lambda <- as.matrix(eigen(S)$values)
#gamma <- eigen(S)$vectors
lambda
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
(fracvar <- lambda/sum(lambda))
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
(fracvar <- lambda/sum(lambda))*10
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
(fracvar <- lambda/sum(lambda))*100
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
suppressWarning(library(ggplot2))
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
gplot(fracvar)
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
qplot(fracvar)
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
qplot(fracvar) + geom_line()
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
fracvar
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- (wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
fracvar
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
qplot(fracvar) + geom_line()
library(ggplot2)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
library(ggplot2)
library(factoextra)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
library(ggplot2)
library(factoextra)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
screeplot(PCX)
library(ggplot2)
library(factoextra)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
fviz_eig(PCX)
library(ggplot2)
library(factoextra)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
fviz_eig(PCX)
suppressWarnings(library(factoextra))
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- wheat[, -c(8)]
PCX <- prcomp(X, retx = TRUE)
lambda <- PCX$sdev^2
gamma <- PCX$rotation
fracvar <- lambda/sum(lambda)
fviz_eig(PCX)
knitr::opts_chunk$set(echo = TRUE)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
(lambda <- PCX$sdev^2)
(gamma <- PCX$rotation)
(fracvar <- lambda/sum(lambda))
(cumuprop <- cumsum(lambda)/sum(lambda))
screeplot(PCX, type = "line")
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=5)
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
corr_matrix <- matrix(0, 7, 7)
for (j in 1:7) {
for (k in 1:7) {
corr_matrix[j, k] <- (gamma[j, k] * lambda[k]) / sqrt(cov(X)[j, j] * lambda[k])
}
}
library(plotrix)
radius <- 1
plot(x = corr_matrix[,1], y = corr_matrix[,2], xlim = c(-2, 2), ylim = c(-1, 1))
draw.circle(0, 0, 1)
arrows(0, 0, )
arrows(0, 0, corr_matrix[1, 1], corr_matrix[1, 2])
library(plotrix)
radius <- 1
plot(x = corr_matrix[,1], y = corr_matrix[,2], xlim = c(-2, 2), ylim = c(-1, 1))
arrows(0, 0, corr_matrix[1, 1], corr_matrix[1, 2])
draw.circle(0, 0, 1)
library(plotrix)
radius <- 1
plot(x = 0, y = 0, xlim = c(-2, 2), ylim = c(-1, 1))
arrows(0, 0, corr_matrix[1, 1], corr_matrix[1, 2])
draw.circle(0, 0, 1)
library(plotrix)
radius <- 1
plot(x = 0, y = 0, xlim = c(-2, 2), ylim = c(-1, 1))
for (i in 1:7) {
arrows(0, 0, corr_matrix[i, 1], corr_matrix[i, 2])
}
draw.circle(0, 0, 1)
shiny::runApp('Desktop/app')
knitr::opts_chunk$set(echo = TRUE)
class <- wheat$V8
knitr::opts_chunk$set(echo = TRUE)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
(lambda <- PCX$sdev^2)
(gamma <- PCX$rotation)
(fracvar <- lambda/sum(lambda))
(cumuprop <- cumsum(lambda)/sum(lambda))
screeplot(PCX, type = "line")
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=5, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
corr_matrix <- matrix(0, 7, 7)
for (j in 1:7) {
for (k in 1:7) {
corr_matrix[j, k] <- (gamma[j, k] * lambda[k]) / sqrt(cov(X)[j, j] * lambda[k])
}
}
corr_matrix[, c(1, 2)]
corr_matrix[,1]^2 + corr_matrix[,2]^2
plot(x = 0, y = 0, xlim = c(-2, 2), ylim = c(-1, 1), xlab = 'PC1', ylab = 'PC2',
main = "correlations between the Xj's and PC1 and PC2")
for (i in 1:7) {
arrows(0, 0, corr_matrix[i, 1], corr_matrix[i, 2])
text(corr_matrix[i, 1] - 0.2,
corr_matrix[i, 2],
paste("X", as.character(i)))
}
radius <- 1
theta <- seq(0, 2 * pi, length = 200)
lines(x = radius * cos(theta), y = radius * sin(theta))
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=5, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
class <- wheat$V8
pairs(X, col = c(1,2,3)[class])
class <- wheat$V8
pairs(X, col = c(1,2,3))
pairs(X, col = c(1,2,3)[wheat$V8])
shiny::runApp('Desktop/Data-Science-Project/SEA_Oil_Painting_Dashboard')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
wheat <- read.csv("Wheat data.txt", sep = "", header = F)
X <- scale(wheat[, -c(8)], scale = FALSE)
PCX <- prcomp(X, retx = TRUE)
(lambda <- PCX$sdev^2)
(gamma <- PCX$rotation)
(fracvar <- lambda/sum(lambda))
(cumuprop <- cumsum(lambda)/sum(lambda))
screeplot(PCX, type = "line")
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=5, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
corr_matrix <- matrix(0, 7, 7)
for (j in 1:7) {
for (k in 1:7) {
corr_matrix[j, k] <- (gamma[j, k] * lambda[k]) / sqrt(cov(X)[j, j] * lambda[k])
}
}
corr_matrix[, c(1, 2)]
corr_matrix[,1]^2 + corr_matrix[,2]^2
plot(x = 0, y = 0, xlim = c(-2, 2), ylim = c(-1, 1), xlab = 'PC1', ylab = 'PC2',
main = "correlations between the Xj's and PC1 and PC2")
for (i in 1:7) {
arrows(0, 0, corr_matrix[i, 1], corr_matrix[i, 2])
text(corr_matrix[i, 1] - 0.2,
corr_matrix[i, 2],
paste("X", as.character(i)))
}
radius <- 1
theta <- seq(0, 2 * pi, length = 200)
lines(x = radius * cos(theta), y = radius * sin(theta))
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=5, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
pairs(X, col = c(1,2,3)[wheat$V8])
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=1, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, pch=2, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=5)
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8))
plot(x = PCX$x[,1], y = PCX$x[,2], col = wheat$V8, xlab = 'PC1', ylab = 'PC2')
legend(-3, 4, horiz = TRUE, unique(wheat$V8), col=1:length(wheat$V8), pch=1)
plot(x = 0, y = 0, xlim = c(-2, 2), ylim = c(-1, 1), xlab = 'PC1', ylab = 'PC2',
main = "correlations between the Xj's and PC1 and PC2")
for (i in 1:7) {
arrows(0, 0, corr_matrix[i, 1], corr_matrix[i, 2])
text(corr_matrix[i, 1] - 0.2,
corr_matrix[i, 2],
paste("X", as.character(i)))
}
radius <- 1
theta <- seq(0, 2 * pi, length = 200)
lines(x = radius * cos(theta), y = radius * sin(theta))
shiny::runApp()
runApp()
customTheme <- shinyDashboardThemeDIY(
### general
appFontFamily = "Optima"
,appFontColor = "#2D2D2D"
,primaryFontColor = "#000000"
,infoFontColor = "#000000"
,successFontColor = "#0F0F0F"
,warningFontColor = "#D41A1A"
,dangerFontColor = "#D41A1A"
,bodyBackColor = "#FFFFFF"
### header
,logoBackColor = "#FFFFFF"
,headerButtonBackColor = "#FFFFFF"
,headerButtonIconColor = "#000000"
,headerButtonBackColorHover = "#CAE0E6"
,headerButtonIconColorHover = "#000000"
,headerBackColor = "#FFFFFF"
,headerBoxShadowColor = ""
,headerBoxShadowSize = "0px 0px 0px"
### sidebar
,sidebarBackColor = "#F0F0F0"
,sidebarPadding = "3"
,sidebarMenuBackColor = "transparent"
,sidebarMenuPadding = "2"
,sidebarMenuBorderRadius = 0
,sidebarShadowRadius = ""
,sidebarShadowColor = "0px 0px 0px"
,sidebarUserTextColor = "#737373"
,sidebarSearchBackColor = "#FFFFFF"
,sidebarSearchIconColor = "#000000"
,sidebarSearchBorderColor = "#DCDCDC"
,sidebarTabTextColor = "#737373"
,sidebarTabTextSize = "15"
,sidebarTabBorderStyle = "none"
,sidebarTabBorderColor = "none"
,sidebarTabBorderWidth = "0"
,sidebarTabBackColorSelected = "#D1D1D1"
,sidebarTabTextColorSelected = "#000000"
,sidebarTabRadiusSelected = "0px"
,sidebarTabBackColorHover = "#F5F5F5"
,sidebarTabTextColorHover = "#000000"
,sidebarTabBorderStyleHover = "none solid none none"
,sidebarTabBorderColorHover = "#C8C8C8"
,sidebarTabBorderWidthHover = "4"
,sidebarTabRadiusHover = "0px"
### boxes
,boxBackColor = "#FFFFFF"
,boxBorderRadius = "5"
,boxShadowSize = "none"
,boxShadowColor = ""
,boxTitleSize = "18"
,boxDefaultColor = "#E1E1E1"
,boxPrimaryColor = "#5F9BD5"
,boxInfoColor = "#B4B4B4"
,boxSuccessColor = "#70AD47"
,boxWarningColor = "#ED7D31"
,boxDangerColor = "#E84C22"
,tabBoxTabColor = "#F8F8F8"
,tabBoxTabTextSize = "14"
,tabBoxTabTextColor = "#646464"
,tabBoxTabTextColorSelected = "#2D2D2D"
,tabBoxBackColor = "#F8F8F8"
,tabBoxHighlightColor = "#C8C8C8"
,tabBoxBorderRadius = "5"
### inputs
,buttonBackColor = "#E2D2FA"
,buttonTextColor = "#2D2D2D"
,buttonBorderColor = "#FFFFFF"
,buttonBorderRadius = "9"
,buttonBackColorHover = "#BEBEBE"
,buttonTextColorHover = "#000000"
,buttonBorderColorHover = "#969696"
,textboxBackColor = "#FFFFFF"
,textboxBorderColor = "#424242"
,textboxBorderRadius = "9"
,textboxBackColorSelect = "#F5F5F5"
,textboxBorderColorSelect = "#6C6C6C"
### tables
,tableBackColor = "#F8F8F8"
,tableBorderColor = "#EEEEEE"
,tableBorderTopSize = "5"
,tableBorderRowSize = "4"
)
runApp()
source("~/Desktop/Data-Science-Project/SEA_Oil_Painting_Dashboard/helper.R")
source("~/Desktop/Data-Science-Project/SEA_Oil_Painting_Dashboard/helper.R")
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(Hitters)
data(Hitters)
library("MASS")
library("ISLR")
data(Hitters)
shiny::runApp()
