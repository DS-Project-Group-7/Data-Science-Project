}
}
aux_support_condition <- c(
'auxiliary_support_condition',
'accretions_auxiliary_support',
'indentations_auxiliary_support',
'insect_damage_auxiliary_support',
'joins_unstable_auxiliary_support',
'joins_split_auxiliary_support',
'joins_not_flat_auxiliary_support',
'mould_auxiliary_support',
'planar_auxiliary_support',
'prev_treatment_auxiliary_support',
'surface_dirt_auxiliary_support',
'staining_auxiliary_support',
'warped_auxiliary_support'
)
aux_support_df <- art[aux_support_condition]
colnames(aux_support_df) <- c('condition ratings', 'accretions', 'indentations',
'insect damage', 'joins unstable', 'joins split',
'joins not flat', 'mould', 'planar', 'previous treatment',
'surface dirt', 'staining', 'warped')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:13) {
for (j in 1:13) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
count <- count + 1
}
}
}
table(aux_support_df[,i], aux_support_df[,j])
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:13) {
for (j in 1:13) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
print(j)
count <- count + 1
}
}
}
aux_support_condition <- c(
'auxiliary_support_condition',
'accretions_auxiliary_support',
'indentations_auxiliary_support',
'insect_damage_auxiliary_support',
'joins_unstable_auxiliary_support',
'joins_split_auxiliary_support',
'joins_not_flat_auxiliary_support',
'planar_auxiliary_support',
'prev_treatment_auxiliary_support',
'surface_dirt_auxiliary_support',
'staining_auxiliary_support',
'warped_auxiliary_support'
)
aux_support_df <- art[aux_support_condition]
colnames(aux_support_df) <- c('condition ratings', 'accretions', 'indentations',
'insect damage', 'joins unstable', 'joins split',
'joins not flat', 'planar', 'previous treatment',
'surface dirt', 'staining', 'warped')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:13) {
for (j in 1:13) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
print(j)
count <- count + 1
}
}
}
aux_support_df$warped
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:12) {
for (j in 1:12) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
print(j)
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:12) {
for (j in 1:12) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Auxiliary Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Auxiliary Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 2:22) {
for (j in 2:22) {
if (i == j) {
} else {
attr1[count] <- colnames(paint_support_df)[i]
attr2[count] <- colnames(paint_support_df)[j]
#test_df <- as.data.frame(ftable(paint_support_df$collection, paint_support_df[,j],
#                               paint_support_df[,i]))
#test_df$wt <- ifelse(test_df$Freq == 0, 0, 1)
#three_way <- glm(Freq ~ factor(Var3)*factor(Var1) + factor(Var2)*factor(Var1),
#                 family = poisson, data = test_df, weights = wt)
#pval[count] <- tail(anova(three_way, test = "Chi")$`Pr(>Chi)`, 1)
pval[count] <- fisher.test(table(paint_support_df[,i], paint_support_df[,j]))$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Paint Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Paint Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 35, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Paint Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 40, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
aux_support_condition <- c(
'auxiliary_support_condition',
'accretions_auxiliary_support',
'indentations_auxiliary_support',
'insect_damage_auxiliary_support',
'joins_unstable_auxiliary_support',
'joins_split_auxiliary_support',
'joins_not_flat_auxiliary_support',
'planar_auxiliary_support',
'prev_treatment_auxiliary_support',
'surface_dirt_auxiliary_support',
'staining_auxiliary_support',
'warped_auxiliary_support'
)
aux_support_df <- art[aux_support_condition]
colnames(aux_support_df) <- c('condition ratings', 'accretions', 'indentations',
'insect damage', 'joins unstable', 'joins split',
'joins not flat', 'planar', 'previous treatment',
'surface dirt', 'staining', 'warped')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:12) {
for (j in 1:12) {
if (i == j) {
} else {
attr1[count] <- colnames(aux_support_df)[i]
attr2[count] <- colnames(aux_support_df)[j]
pval[count] <- fisher.test(table(aux_support_df[,i], aux_support_df[,j]))$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Auxiliary Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Auxiliary Support Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ground_layer_condition <- c(
'ground_layer_application',
'size_layer_visible',
'ground_layer_thickness',
'coloured_ground',
'id_sulphate',
'id_carbonate',
'uniform_application',
'ground_proprietary_paint',
'ground_layer_limit'
)
ground_df <- art[aux_support_df]
ground_layer_condition <- c(
'ground_layer_application',
'size_layer_visible',
'ground_layer_thickness',
'coloured_ground',
'id_sulphate',
'id_carbonate',
'uniform_application',
'ground_proprietary_paint',
'ground_layer_limit'
)
ground_df <- art[ground_layer_condition]
ground_df$ground_layer_application
ground_df$ground_layer_limit
ground_layer_condition <- c(
'ground_layer_application',
'size_layer_visible',
'ground_layer_thickness',
'coloured_ground',
'id_sulphate',
'id_carbonate',
'uniform_application',
'ground_proprietary_paint',
'ground_layer_limit'
)
ground_df <- art[ground_layer_condition]
colnames(ground_df) <- c('Ground Type', 'size visibility', 'thickness', 'coloured ground',
'contains sulphate', 'contains carbonate', 'uniform application',
'proprietary paint', 'application edge')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:9) {
for (j in 1:9) {
if (i == j) {
} else {
attr1[count] <- colnames(ground_df)[i]
attr2[count] <- colnames(ground_df)[j]
pval[count] <- fisher.test(table(ground_df[,i], ground_df[,j]))$p.value
count <- count + 1
}
}
}
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:9) {
for (j in 1:9) {
if (i == j) {
} else {
attr1[count] <- colnames(ground_df)[i]
attr2[count] <- colnames(ground_df)[j]
pval[count] <- fisher.test(table(ground_df[,i], ground_df[,j]), workspace = 2e8)$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Ground Layer Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ground_layer_condition <- c(
'ground_layer_application',
'size_layer_visible',
'ground_layer_thickness',
'coloured_ground',
'id_sulphate',
'id_carbonate',
'uniform_application',
'ground_proprietary_paint',
'ground_layer_limit'
)
ground_df <- art[ground_layer_condition]
colnames(ground_df) <- c('ground type', 'size visibility', 'thickness', 'coloured ground',
'contains sulphate', 'contains carbonate', 'uniform application',
'proprietary paint', 'application edge')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:9) {
for (j in 1:9) {
if (i == j) {
} else {
attr1[count] <- colnames(ground_df)[i]
attr2[count] <- colnames(ground_df)[j]
pval[count] <- fisher.test(table(ground_df[,i], ground_df[,j]), workspace = 2e8)$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Ground Layer Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Ground Layer Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
media_layer_condition <- c(
'abrasions_media',
'accretions_media',
'adhered_well_to_support',
'cleavage_media',
'cracking_media',
'discolouration_media',
'flaking_media',
'losses_media',
'overpainting_media',
'surface_dirt_media',
'appears_plastic',
'appears_elastic',
'dry_cured',
'infilling'
)
media_layer_condition <- c(
'abrasions_media',
'accretions_media',
'adhered_well_to_support',
'cleavage_media',
'cracking_media',
'discolouration_media',
'flaking_media',
'losses_media',
'overpainting_media',
'surface_dirt_media',
'appears_plastic',
'appears_elastic',
'dry_cured',
'infilling'
)
media_layer_df <- art[media_layer_condition]
media_layer_condition <- c(
'media_condition',
'abrasions_media',
'accretions_media',
'adhered_well_to_support',
'cleavage_media',
'cracking_media',
'discolouration_media',
'flaking_media',
'losses_media',
'overpainting_media',
'surface_dirt_media',
'appears_plastic',
'appears_elastic',
'dry_cured',
'infilling'
)
media_layer_df <- art[media_layer_condition]
colnames(media_layer_df) <- c('condition rating', 'abrasions', 'accretions', 'support adherence',
'cleavage', 'cracking', 'discolouration', 'flaking', 'losses',
'overpainting', 'surface dirt', 'appears plastic',
'appears elastic', 'dry cured', 'infilling')
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:15) {
for (j in 1:15) {
if (i == j) {
} else {
attr1[count] <- colnames(media_layer_df)[i]
attr2[count] <- colnames(media_layer_df)[j]
pval[count] <- fisher.test(table(media_layer_df[,i],
media_layer_df[,j]), workspace = 2e8)$p.value
count <- count + 1
}
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Media Layer Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
attr1 <- c()
attr2 <- c()
pval <- c()
count <- 1
for (i in 1:15) {
for (j in 1:9) {
attr1[count] <- colnames(media_layer_df)[i]
attr2[count] <- colnames(ground_df)[j]
pval[count] <- fisher.test(table(media_layer_df[,i],
ground_df[,j]), workspace = 2e8)$p.value
count <- count + 1
}
}
temp <- as.data.frame(cbind(attr1, attr2, pval))
temp$pval <- as.double(temp$pval)
temp$independent <- ifelse(temp$pval > 0.05, "Independent", "Not Independent")
temp$independent <- as.factor(temp$independent)
temp <- temp[, c("attr1", "attr2", "independent")]
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Media Layer Condition and Ground Layer Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Media Condition and Ground Condition") +
geom_tile(color = "white") + xlab("Attributes") + ylab("Attributes") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
ggplot(temp, aes(x = attr1, y = attr2, fill = independent)) +
ggtitle("Independence Between Media Condition and Ground Condition") +
geom_tile(color = "white") + xlab("Media Condition") + ylab("Ground Layer Condition") +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1)) +
scale_fill_manual(values = c("#B6B0FF", "green"))
runApp()
art$painting_support_condition
art <- art %>%
filter(!is.na(auxiliary_support_condition)) %>%
filter(!is.na(media_condition)) %>%
filter(!is.na(ground_condition)) %>%
filter(!is.na(painting_support_condition)) %>%
filter(!is.na(frame_condition)) %>%
mutate(auxiliary_support_condition = recode(auxiliary_support_condition, "0" = "Poor", "1" = "Fair", "2" = "Good", "3" = "Excellent")) %>%
mutate(media_condition = recode(media_condition, "0" = "Poor", "1" = "Fair", "2" = "Good", "3" = "Excellent")) %>%
mutate(ground_condition = recode(ground_condition, "0" = "Poor", "1" = "Fair", "2" = "Good", "3" = "Excellent")) %>%
mutate(painting_support_condition = recode(painting_support_condition, "0" = "Poor", "1" = "Fair", "2" = "Good", "3" = "Excellent")) %>%
mutate(frame_condition = recode(frame_condition, "0" = "Poor", "1" = "Fair", "2" = "Good", "3" = "Excellent"))
art$painting_support_condition
ftable(art$painting_support_condition, art$holes_painting_support)
as.data.frame(ftable(art$painting_support_condition, art$holes_painting_support))
temp <- as.data.frame(ftable(art$painting_support_condition, art$holes_painting_support))
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
temp <- as.data.frame(ftable(art$painting_support_condition, art$tears_painting_support))
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
temp$Var1 <- factor(temp$Var1, levels = c('poor', 'fair', 'good', 'excellent'))
temp
temp <- as.data.frame(ftable(art$painting_support_condition, art$tears_painting_support))
temp$Var1 <- factor(temp$Var1, levels = c('Poor', 'Fair', 'Good', 'Excellent'))
temp
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
temp <- as.data.frame(ftable(art$painting_support_condition, art$holes_painting_support))
temp$Var1 <- factor(temp$Var1, levels = c('Poor', 'Fair', 'Good', 'Excellent'))
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
temp <- as.data.frame(ftable(art$painting_support_condition, art$holes_painting_support))
temp$Var1 <- factor(temp$Var1, levels = c('Poor', 'Fair', 'Good', 'Excellent'))
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
temp <- as.data.frame(ftable(art$painting_support_condition, art$holes_painting_support))
temp$Var1 <- factor(temp$Var1, levels = c('Poor', 'Fair', 'Good', 'Excellent'))
ggplot(temp, aes(fill=Var2, y=Freq, x=Var1)) +
geom_bar(position="dodge", stat="identity")
