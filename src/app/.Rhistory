gender <- c(rep(1, 12), rep(0, 12))
edu <- rep(6:17, 2)
agree <- c(25, 27, 75, 29, 32, 36, 115, 31, 28, 9, 15, 3, 17, 26, 91, 30, 55, 50, 190, 17, 18, 7, 13, 3)
disagree <- c(9, 15, 49, 29, 45, 59, 245, 70, 79, 23, 110, 29, 5, 16, 36, 35, 67, 62, 403, 92, 81, 34,
115, 28)
total <- agree + disagree
gender <- c(rep(1, 12), rep(0, 12))
total
add.logistic <- glm(agree/total ~ factor(educ) + factor(gender), family = binomial, weight = total)
educ <- rep(6:17, 2)
agree <- c(25, 27, 75, 29, 32, 36, 115, 31, 28, 9, 15, 3, 17, 26, 91, 30, 55, 50, 190, 17, 18, 7, 13, 3)
disagree <- c(9, 15, 49, 29, 45, 59, 245, 70, 79, 23, 110, 29, 5, 16, 36, 35, 67, 62, 403, 92, 81, 34,
115, 28)
total <- agree + disagree
gender <- c(rep(1, 12), rep(0, 12))
add.logistic <- glm(agree/total ~ factor(educ) + factor(gender), family = binomial, weight = total)
summary(add.logistic)$coef
anova(add.logistic, test = 'Chi')
add.logistic <- glm(agree/total ~ factor(gender) + factor(educ), family = binomial, weight = total)
anova(add.logistic, test = 'Chi')
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ + educ:factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
logistic1 <- glm(agree/total ~ educ + factor(gender), family = binomial, weight = total)
anova(logistic1, logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
step(logistic0)
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ + educ:factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ + educ:factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ, family = binomial, weight = total)
logistic <- glm(agree/total ~ educ, family = binomial, weight = total)
summary(logistic)$coef
install.packages('shiny')
library(shiny)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1.69, 1.72, 1.76, 1.78, 1.81, 1.84, 1.86, 1.88)
n <- c(59, 60, 62, 56, 63, 59, 62, 60)
y <- c(6, 13, 18, 28, 52, 53, 61, 60)
## Compute the empirical logit
emp.logit <- log((y + 0.5)/(n - y + 0.5))
par(mar=c(4,4,1,1))
plot(x, emp.logit, xlab = 'Dosage', ylab = 'Empirical logits')
logistic <- glm(y/n ~ x, family = binomial, weights = n)
summary(logistic)$coef
confint(logistic)
# Compute the odds ratio
beta1 <- summary(logistic)$coef[2]
(odds <- exp(0.1 * beta1))
exp(0.1*confint(logistic)[2,])
etahat <- summary(logistic)$coef[1] + summary(logistic)$coef[2] * 1.8
(probability <- exp(etahat)/(1 + exp(etahat)))
X.pred <- matrix(c(1, 1.8), nrow = 1, ncol = 2)
se <- sqrt(X.pred %*% summary(logistic)$cov.scaled %*% t(X.pred))
eta_l <- etahat - 1.96 * se
eta_r <- etahat + 1.96 * se
c(exp(eta_l)/(1 + exp(eta_l)), exp(eta_r)/(1 + exp(eta_r)))
# Testing using residual deviance
(p_value <- 1 - pchisq(deviance(logistic), df.residual(logistic)))
# Testing using Pearson Chi-square test
(p_value <- 1 - pchisq(sum(resid(logistic, type = 'pearson')^2), df.residual(logistic)))
par(mar=c(4,4,1,1))
plot(x, resid(logistic, type = 'deviance'), xlab = 'X', ylab = 'Deviance residuals')
quad.logistic <- glm(y/n ~ x + I(x^2), family = binomial, weight = n)
# Performing likelihood ratio test between straight line model and quadratic logistic model
anova(logistic, quad.logistic, test = "LRT")
educ <- rep(6:17, 2)
agree <- c(25, 27, 75, 29, 32, 36, 115, 31, 28, 9, 15, 3, 17, 26, 91, 30, 55, 50, 190, 17, 18, 7, 13, 3)
disagree <- c(9, 15, 49, 29, 45, 59, 245, 70, 79, 23, 110, 29, 5, 16, 36, 35, 67, 62, 403, 92, 81, 34,
115, 28)
total <- agree + disagree
gender <- c(rep(1, 12), rep(0, 12))
add.logistic <- glm(agree/total ~ factor(educ) + factor(gender), family = binomial, weight = total)
summary(add.logistic)$coef
anova(add.logistic, test = 'Chi')
add.logistic <- glm(agree/total ~ factor(gender) + factor(educ), family = binomial, weight = total)
anova(add.logistic, test = 'Chi')
logistic0 <- glm(agree/total ~ educ * factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic0 <- glm(agree/total ~ educ + educ:factor(gender), family = binomial, weight = total)
anova(logistic0, test = 'Chi')
logistic <- glm(agree/total ~ educ, family = binomial, weight = total)
summary(logistic)$coef
library('shiny')
install.packages('shiny')
install.packages('shiny')
install.packages("shiny")
library('shiny')
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library('shiny')
shinyApp(ui = ui, server = server)
ui <- fluidPage()
server <- function(input, output) {}
library('shiny')
ui <- fluidPage("Hello World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
ui <- fluidPage("Hello World!", sliderInput(inputId = "num",
label = "Choose a number", value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(server = server, ui = ui)
ui <- fluidPage("Hello World!", sliderInput(inputId = "num",
label = "Choose a number", min = 1, max = 100)
)
ui <- fluidPage("Hello World!", sliderInput(inputId = "num",
label = "Choose a number", min = 1, max = 100)
)
ui <- fluidPage("Hello World!", sliderInput(inputId = "num",
label = "Choose a number", value = 1, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(server = server, ui = ui)
ui <- fluidPage("Hello World!", actionButton()
)
ui <- fluidPage("Hello World!", actionButton()
)
ui <- fluidPage("Hello World!", actionButton(inputId = 1)
)
ui <- fluidPage("Hello World!", actionButton(inputId = 1, label = "action")
)
server <- function(input, output) {}
shinyApp(server = server, ui = ui)
ui <- fluidPage("Hello World!", submitButton(inputId = 1, label = "action")
)
ui <- fluidPage("Hello World!", submitButton(inputId = 1, label = "action")
)
ui <- fluidPage("Hello World!", submitButton(text = "Apply Changes!")
)
server <- function(input, output) {}
shinyApp(server = server, ui = ui)
ui <- fluidPage("Hello World!", submitButton(inputId = "num", text = "Apply Changes!")
)
?submitButton
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100)
plotOutput(outputId = "hist")
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {}
shinyApp(server = server, ui = ui)
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(server = server, ui = ui)
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), title(main = "Historgram"))
})
}
shinyApp(server = server, ui = ui)
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = "Histogram")
})
}
shinyApp(server = server, ui = ui)
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
dist(rnorm(input$num))
})
}
shinyApp(server = server, ui = ui)
ui <- fluidPage(sliderInput(inputId = "num", label = "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(server = server, ui = ui)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App!"),
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Select a number between 1 and 100",
value = 50, min = 1, max = 100),
textInput("title", "Enter a title for the plot"),
actionButton("value_update", "Update Variable Number"),
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output) {
data <- eventReactive(
input$value_update,
{rnorm(input$slider)
})
output$hist <- renderPlot(
{hist(data(), main = isolate(input$title))
}
)
}
shinyApp(server = server, ui = ui)
mpg
data()
data(mpg)
data(cars)
cars
library(tidyverse)
library(ggplot2)
install.packages('tidyverse')
data()
data(cars)
cars
cars %>%
ggplot(aes(speed, dist)) +
geom_point()
dataset(cars) %>%
ggplot(aes(speed, dist)) +
geom_point()
library(tidyverse)
library(ggplot2)
dataset(cars) %>%
ggplot(aes(speed, dist)) +
geom_point()
data(cars) %>%
ggplot(aes(speed, dist)) +
geom_point()
data(cars) %>%
ggplot(aes(speed, dist)) +
geom_point()
cars %>%
ggplot(aes(speed, dist)) +
geom_point()
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = "blue"))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = "blue"))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = b))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = 'Blue'))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = 'Red'))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = speed))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = speed, alpha = 0.5))
cars %>%
ggplot(aes(speed, dist)) +
geom_point(aes(size = dist, color = speed, alpha = 0.5)) +
labs(title = "Speed vs Distance")
data()
data("CO2")
CO2
summary(CO2)
CO2 %>%
ggplot(aes(conc, uptake)) +
geom_boxplot()
CO2 %>%
ggplot(aes(conc, uptake)) +
geom_boxplot() +
facet_wrap(~Type)
CO2 %>%
ggplot(aes(conc, uptake)) +
geom_boxplot() +
geom_point()
CO2 %>%
ggplot(aes(conc, uptake)) +
geom_boxplot() +
geom_point() +
facet_wrap(~Type)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(aes()) +
facet_wrap(~Type)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(aes(size = conc)) +
facet_wrap(~Type)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(aes(size = conc, color = Plant)) +
facet_wrap(~Type)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(aes(size = conc, color = Plant)) +
facet_wrap(~Type) +
labs(title = "Treatment versus Uptake")
summary(CO2)
mpg
summary(mpg)
View(mpg)
mpg %>%
ggplot(aes(displ, cyl))
mpg %>%
ggplot(aes(displ, cyl)) +
geom_point()
mpg %>%
ggplot(aes(displ, cty)) +
geom_point()
mpg %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5) +
geom_line(method = lm)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5) +
geom_smooth(method = lm)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5) +
geom_smooth(method = lm) +
facet_wrap(~year)
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5) +
geom_smooth(method = lm) +
facet_wrap(~year)
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(color = class, size = trans), alpha = 0.5) +
geom_smooth(method = lm) +
facet_wrap(~year) +
labs(x = "Engine size", y = "MPG in the city", title = "Fuel efficiency")
pchisq(12.47, df=11)
pchisq(80.432, df=1)
pchisq(11.4850, df=1)
1- pchisq(11.4850, df=1)
pnorm(8.18)
1 - pchisq(15.2, 1)
c(5, 8:11)
qchisq(0.95, 1)
load("/Users/greysonchung/Downloads/Ch5workspace.RData")
trend.2
trend.3
summary(trend.3)
pnorm(2.2338)
1-pnorm(2.2338)
pchisq(14.83, 1)
1-pchisq(14.83, 1)
library(faraway)
help(hsb)
dim(hsb) #n=200, p=11
library(nnet)
head(hsb)
summary(hsb)
summary(hsb$prog)
is.factor(hsb$prog)
help(multinom)
hsb0 <-multinom(prog~1,data=hsb)
hsb0
summary(hsb0)
anova(hsb0)
hsb1<-multinom(prog~gender+race+ses+schtyp+read+write+math+science+socst,data=hsb, Hess=T)
hsb1
summary(hsb1)
attributes(hsb1)
attributes(summary(hsb1))
anova(hsb0,hsb1) #This compares two models based on the chi^2 test.
coef(hsb1)
coef(summary(hsb1))
hsb1$fitted
hsb1$residuals
hsb1$deviance
hsb1$edf
hsb1$AIC
hsb1$Hessian
hsb1.aic <- step(hsb1, k=2, trace=1)
hsb1.aic
summary(hsb1.aic)
hsb1.bic <- step(hsb1, k=log(200.0), trace=1)
hsb1.bic
anova(hsb1, hsb1.aic)
V<-solve(hsb1.aic$Hessian)
V
V[c(2, 4)]
V[c(2, 4), c(2, 4)]
library(faraway)
data(nes96)
help(nes96)
dim(nes96) #n=944, p=10
library(MASS)
head(nes96)
summary(nes96)
is.ordered(nes96$income)
levels(nes96$income)
levels(nes96$PID)
is.ordered(nes96$PID)
##############Define the response variable "party", and new data "rnes96"
party <- nes96$PID
levels(party) <- c("Democrat","Democrat","Independent","Independent","Independent","Republican","Republican")
inca <- c(1.5,4,6,8,9.5,10.5,11.5,12.5,13.5,14.5,16,18.5,21,23.5, 27.5,32.5,37.5,42.5,47.5,55,67.5,82.5,97.5,115)
income <- inca[unclass(nes96$income)]
table(nes96$income)
table(income)
rnes96 <- data.frame(party, income, education=nes96$educ, age=nes96$age)
summary(rnes96)
library(faraway)
data(nes96)
help(nes96)
dim(nes96) #n=944, p=10
library(MASS)
head(nes96)
summary(nes96)
is.ordered(nes96$income)
levels(nes96$income)
levels(nes96$PID)
is.ordered(nes96$PID)
##############Define the response variable "party", and new data "rnes96"
party <- nes96$PID
levels(party) <- c("Democrat","Democrat","Independent","Independent","Independent","Republican","Republican")
inca <- c(1.5,4,6,8,9.5,10.5,11.5,12.5,13.5,14.5,16,18.5,21,23.5, 27.5,32.5,37.5,42.5,47.5,55,67.5,82.5,97.5,115)
income <- inca[unclass(nes96$income)]
table(nes96$income)
table(income)
rnes96 <- data.frame(party, income, education=nes96$educ, age=nes96$age)
summary(rnes96)
#################
pomod <- polr(party~age+education+income, data=rnes96, Hess=T,method="logistic")
pomod
summary(pomod)
anova(pomod)
fitted(pomod)
pomod$fitted
resid(pomod)  #does not exist.
pomod$residual
deviance(pomod)
pomod$deviance
pomod$lp
predict(pomod,type="probs")
predict(pomod,type="class")
table(predict(pomod,type="class"))
rnes96$educ.f <-factor(unclass(rnes96$education))
pomodf <- polr(party~age+educ.f+income, data=rnes96, Hess=T,method="logistic")
summary(pomodf)
anova(pomod, pomodf)
pomod.aic <- step(pomod, k=2, trace=1)
pomod.bic <- step(pomod, k=log(944.0), trace=1)
anova(pomod, pomod.aic)
summary(pomod.aic)
predict(pomod.aic, rnes96[944, ],type="probs", se.fit=TRUE)
V<-solve(pomod.aic$Hess)
se.1<-sqrt(V[2,2]+115^2*V[1,1]-2*115*V[1,2]);
se.2<-sqrt(V[3,3]+115^2*V[1,1]-2*115*V[1,3])
a<-pomod.aic$zeta-115*pomod.aic$coef
b1<-a-1.96*c(se.1,se.2)
b2<-a+1.96*c(se.1,se.2)
V
V[2, 2]
V[1, 2]
shiny::runApp('Desktop/app')
shiny::runApp('Desktop/app')
install.packages("highcharter")
install.packages("plotly")
install.packages("bokeh")
install.packages("recharts4r")
install.packages("polished")
shiny::runApp('Desktop/app')
runApp('Desktop/app')
install.packages("dashboardthemes")
shiny::runApp('Desktop/app')
install.packages("semantic.dashboard")
runApp('Desktop/app')
